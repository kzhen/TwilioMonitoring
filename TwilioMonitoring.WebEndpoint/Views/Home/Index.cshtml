@{
  ViewBag.Title = "Index";
}

@section scripts
{
  <script type="text/javascript" src="/Scripts/jquery.signalR-1.1.3.js"></script>
  @*<script type="text/javascript" src="/Scripts/d3.v3.js"></script>*@
  <script src="http://code.highcharts.com/highcharts.js"></script>
  @*<script src="/Scripts/highcharts.js" type="text/javascript"></script>*@
  <script src="/Scripts/jquery.mCustomScrollbar.min.js"></script>
  <script src="http://code.highcharts.com/modules/exporting.js"></script>
  <script type="text/javascript" src="http://localhost:9876/signalr/hubs"></script>
  <script type="text/javascript">

    var myHub;
    var chart; // global
    var columnChart;
    var columnData = [];

    function updateScroller() {
      $(".live-calls").mCustomScrollbar("update");
    }

    $(function () {
      $.connection.hub.url = "http://localhost:9876/signalr";

      myHub = $.connection.myHubThing;

      myHub.client.byTotal = function (message) {
        console.info(message);
        var series = chart.series[0],
          shift = series.data.length > 20; // shift if the series is longer than 20
        // add the point

        var d = new Date();

        var json = JSON.parse(message);

        var point = [Date.now(), json.TotalCalls];

        if (json.EventType == "starting") {
          chart.series[0].addPoint(point, true, shift);
        } else if (json.EventType == "ending") {
          chart.series[1].addPoint(point, true, shift);
        }

        
      }

      //myHub.client.byRawCall = function (message) {
      //  var container = $(".call-container");
      //  var element;
      //  var json = JSON.parse(message);

      //  var paragraphs = container.find("p");

      //  if (container.find("p").length > 50) {
      //    container.find("p:last-child").remove();
      //  }

      //  element = "<p>Call from: " + json.From + " To: " + json.To + "</p>";

      //  container.prepend(element);
      //  updateScroller();
      //}

      //myHub.client.byLocation = function (message) {
      //  var json = JSON.parse(message);
      //  var idx = json.Location;
      //  var total = json.Total;

      //  if (columnData.length < idx) {
      //    columnData.push([idx, total]);
      //  } else {
      //    columnData[idx] = [idx, total];
      //  }

      //  columnChart.series[0].setData(columnData);

      //  //console.info(message);
      //}

      $.connection.hub.start().done(function () {
        console.info("started...");
      });

      //columnChart = new Highcharts.Chart({
      //  chart: {
      //    renderTo: 'columnChart',
      //    defaultSeriesType: 'column'
      //  },
      //  data: columnData,
      //  title: {
      //    text: 'By Location'
      //  },
      //  xAxis: {
      //    categories: [
      //      'Sydney',
      //      'London',
      //      'New York'
      //    ]
      //  },
      //  yAxis: {
      //    min: 0,
      //    title: {
      //      text: 'Volume'
      //    }
      //  },
      //  series: [{
      //    name: 'Random data',
      //    data: []
      //  }]
      //});

      chart = new Highcharts.Chart({
        chart: {
          renderTo: 'container',
          defaultSeriesType: 'spline'
        },
        title: {
          text: 'Live Call Traffic'
        },
        xAxis: {
          type: 'datetime',
          tickPixelInterval: 150,
          maxZoom: 20 * 1000
        },
        yAxis: {
          minPadding: 0.2,
          maxPadding: 0.2,
          title: {
            text: 'Value',
            margin: 80
          }
        },
        series: [{
          name: 'Calls Starting',
          data: []
        },
        {
          name: 'Calls Ending',
          data: []
        }]
      });
    });
  </script>

}

<h2>RabbitMQ Events</h2>

<div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>
@*<div id="columnChart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>*@
<h2>Calls Starting:</h2>

<div id="call-details">
            <div class="live-calls">
                <div class="call-container">
                </div>
            </div>
        </div> 
